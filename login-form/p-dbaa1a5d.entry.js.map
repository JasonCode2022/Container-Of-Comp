{"version":3,"names":["loginCss","Login","username","password","ToggleShowPass","this","showPass","onLogin","e","preventDefault","loginEvent","emit","onRegister","console","log","register","onUsernameInput","target","value","trim","usernameInputValid","onPasswordInput","passwordInputValid","render","type","icon","h","class","novalidate","onSubmit","bind","name","id","placeholder","autocomplete","ref","el","userInput","onInput","required","passInput","typeof","onClick"],"sources":["src/components/login/login.css?tag=at-login","src/components/login/login.tsx"],"sourcesContent":[null,"import { Component, h, State, Event, EventEmitter } from '@stencil/core';\n\n@Component({\n  tag: 'at-login',\n  styleUrl: 'login.css',\n  shadow: false,\n})\nexport class Login {\n  @State() showPass = false;\n  @State() usernameInputValid: boolean;\n  @State() passwordInputValid: boolean;\n  passInput: HTMLInputElement;\n  userInput: HTMLInputElement;\n  @State() Login = {\n    username: '',\n    password: '',\n  };\n  @Event({ bubbles: true, composed: true }) loginEvent: EventEmitter<any>;\n  @Event({ bubbles: true, composed: true }) register: EventEmitter<any>;\n\n  ToggleShowPass() {\n    this.showPass = !this.showPass;\n    alert;\n  }\n\n  onLogin(e: Event) {\n    e.preventDefault();\n    this.loginEvent.emit(this.Login);\n    this.Login = {\n      username: '',\n      password: '',\n    };\n  }\n\n  onRegister() {\n    console.log('register');\n    this.register.emit();\n  }\n\n  onUsernameInput(e: Event) {\n    this.Login.username = (e.target as HTMLInputElement).value;\n    if (this.Login.username.trim() !== '') {\n      this.usernameInputValid = true;\n    } else {\n      this.usernameInputValid = false;\n    }\n  }\n  onPasswordInput(e: Event) {\n    this.Login.password = (e.target as HTMLInputElement).value;\n    if (this.Login.password.trim() !== '') {\n      this.passwordInputValid = true;\n    } else {\n      this.passwordInputValid = false;\n    }\n  }\n\n  render() {\n    let type = 'password';\n    let icon = 'ft-eye';\n    if (this.showPass) {\n      type = 'text';\n      icon = 'ft-eye-off';\n    }\n\n    return [\n      <div class=\"app-content content\">\n        <div class=\"content-overlay\"></div>\n        <div class=\"content-wrapper\">\n          <div class=\"content-header row\"></div>\n          <div class=\"content-body\">\n            <section class=\"row flexbox-container\">\n              <div class=\"col-12 d-flex align-items-center justify-content-center\">\n                <div class=\"col-lg-4 col-md-8 col-10 box-shadow-2 p-0\">\n                  <div class=\"card border-grey border-lighten-3 m-0\">\n                    <div class=\"card-header border-0\">\n                      <div class=\"card-title text-center\">\n                        <div class=\"p-1\">\n                          <h1>Login</h1>\n                        </div>\n                      </div>\n                    </div>\n                    <div class=\"card-content\">\n                      <div class=\"card-body\">\n                        <form class=\"form-horizontal form-simple\" novalidate onSubmit={this.onLogin.bind(this)}>\n                          <fieldset class=\"form-group position-relative has-icon-left mb-1\">\n                            <input\n                              type=\"text\"\n                              name=\"username\"\n                              id=\"username\"\n                              placeholder=\" \"\n                              autocomplete=\"off\"\n                              ref={el => (this.userInput = el)}\n                              value={this.Login.username}\n                              onInput={this.onUsernameInput.bind(this)}\n                              class=\"form-control\"\n                              required\n                            />\n                            <div class=\"form-control-position\">\n                              <i class=\"la la-user\"></i>\n                            </div>\n                          </fieldset>\n                          <fieldset class=\"form-group position-relative\">\n                            <input\n                              type={type}\n                              name=\"password\"\n                              id=\"password\"\n                              placeholder=\"\"\n                              autocomplete=\"off\"\n                              class=\"form-control\"\n                              ref={el => (this.passInput = el)}\n                              value={this.Login.password}\n                              onInput={this.onPasswordInput.bind(this)}\n                              required\n                            />\n                            <div typeof=\"button\" class=\"form-control-position\">\n                              <i class={icon}></i>\n                            </div>\n                          </fieldset>\n                          <div class=\"form-group row\">\n                            <div class=\"col-12 text-center text-sm-right\">\n                              <a class=\"card-link\">Forgot Password?</a>\n                            </div>\n                          </div>\n                          <button type=\"submit\" class=\"btn btn-info btn-block\">\n                            <i class=\"ft-unlock\"></i> Login\n                          </button>\n                        </form>\n                      </div>\n                    </div>\n                    <div class=\"card-footer\">\n                      <div class=\"\">\n                        <p class=\"float-xl-right text-center m-0\">\n                          New here?\n                          <a class=\"card-link\" typeof=\"button\" onClick={this.onRegister.bind(this)}>\n                            Sign Up\n                          </a>\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </section>\n          </div>\n        </div>\n      </div>,\n    ];\n  }\n}\n"],"mappings":"kDAAA,MAAMA,EAAW,G,MCOJC,EAAK,M,iHACI,M,+EAKH,CACfC,SAAU,GACVC,SAAU,G,CAKZ,cAAAC,GACEC,KAAKC,UAAYD,KAAKC,Q,CAIxB,OAAAC,CAAQC,GACNA,EAAEC,iBACFJ,KAAKK,WAAWC,KAAKN,KAAKJ,OAC1BI,KAAKJ,MAAQ,CACXC,SAAU,GACVC,SAAU,G,CAId,UAAAS,GACEC,QAAQC,IAAI,YACZT,KAAKU,SAASJ,M,CAGhB,eAAAK,CAAgBR,GACdH,KAAKJ,MAAMC,SAAYM,EAAES,OAA4BC,MACrD,GAAIb,KAAKJ,MAAMC,SAASiB,SAAW,GAAI,CACrCd,KAAKe,mBAAqB,I,KACrB,CACLf,KAAKe,mBAAqB,K,EAG9B,eAAAC,CAAgBb,GACdH,KAAKJ,MAAME,SAAYK,EAAES,OAA4BC,MACrD,GAAIb,KAAKJ,MAAME,SAASgB,SAAW,GAAI,CACrCd,KAAKiB,mBAAqB,I,KACrB,CACLjB,KAAKiB,mBAAqB,K,EAI9B,MAAAC,GACE,IAAIC,EAAO,WACX,IAAIC,EAAO,SACX,GAAIpB,KAAKC,SAAU,CACjBkB,EAAO,OACPC,EAAO,Y,CAGT,MAAO,CACLC,EAAA,OAAKC,MAAM,uBACTD,EAAA,OAAKC,MAAM,oBACXD,EAAA,OAAKC,MAAM,mBACTD,EAAA,OAAKC,MAAM,uBACXD,EAAA,OAAKC,MAAM,gBACTD,EAAA,WAASC,MAAM,yBACbD,EAAA,OAAKC,MAAM,2DACTD,EAAA,OAAKC,MAAM,6CACTD,EAAA,OAAKC,MAAM,yCACTD,EAAA,OAAKC,MAAM,wBACTD,EAAA,OAAKC,MAAM,0BACTD,EAAA,OAAKC,MAAM,OACTD,EAAA,sBAINA,EAAA,OAAKC,MAAM,gBACTD,EAAA,OAAKC,MAAM,aACTD,EAAA,QAAMC,MAAM,8BAA8BC,WAAU,KAACC,SAAUxB,KAAKE,QAAQuB,KAAKzB,OAC/EqB,EAAA,YAAUC,MAAM,mDACdD,EAAA,SACEF,KAAK,OACLO,KAAK,WACLC,GAAG,WACHC,YAAY,IACZC,aAAa,MACbC,IAAKC,GAAO/B,KAAKgC,UAAYD,EAC7BlB,MAAOb,KAAKJ,MAAMC,SAClBoC,QAASjC,KAAKW,gBAAgBc,KAAKzB,MACnCsB,MAAM,eACNY,SAAQ,OAEVb,EAAA,OAAKC,MAAM,yBACTD,EAAA,KAAGC,MAAM,iBAGbD,EAAA,YAAUC,MAAM,gCACdD,EAAA,SACEF,KAAMA,EACNO,KAAK,WACLC,GAAG,WACHC,YAAY,GACZC,aAAa,MACbP,MAAM,eACNQ,IAAKC,GAAO/B,KAAKmC,UAAYJ,EAC7BlB,MAAOb,KAAKJ,MAAME,SAClBmC,QAASjC,KAAKgB,gBAAgBS,KAAKzB,MACnCkC,SAAQ,OAEVb,EAAA,OAAKe,OAAO,SAASd,MAAM,yBACzBD,EAAA,KAAGC,MAAOF,MAGdC,EAAA,OAAKC,MAAM,kBACTD,EAAA,OAAKC,MAAM,oCACTD,EAAA,KAAGC,MAAM,aAAW,sBAGxBD,EAAA,UAAQF,KAAK,SAASG,MAAM,0BAC1BD,EAAA,KAAGC,MAAM,cAAgB,aAKjCD,EAAA,OAAKC,MAAM,eACTD,EAAA,OAAKC,MAAM,IACTD,EAAA,KAAGC,MAAM,kCAAgC,YAEvCD,EAAA,KAAGC,MAAM,YAAYc,OAAO,SAASC,QAASrC,KAAKO,WAAWkB,KAAKzB,OAAK,qB"}